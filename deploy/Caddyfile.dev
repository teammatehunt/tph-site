# vim: filetype=caddyfile

{
    debug
    storage file_system {
        root /srv
    }
}

# snippet to serve files after checking auth
(serve) {
    # matchers are defined prior to snippet

    route {
        # `route` prevents Caddy from reordering the directives under it
        reverse_proxy @django localhost:8000

        # other files come from the client's public directory
        handle @nextstatic {
            uri strip_prefix /static
            root app/client/public/
            file_server
        }

        # proxy everything else to the frontend on port 3000
        reverse_proxy localhost:3000
    }
}

# development server configuration
{$SERVER_HOSTNAME} {
    log {
        output file /srv/logs/caddy.log
    }

    encode zstd gzip

    # matchers

    @static_root {
        # static files at root
        path /banner.png
        path /favicon.ico
        path /logo.png
        path /sorttable.js
        path /worker.js
        path /pyodide/*
    }

    # things to be sent to Django that may need to be gated by @needs_check
    @django {
        path /api/*
        path /media/*
        path /ws/*  # FIXME: remove if websockets unused
        path /clipboard
    }

    @nextstatic {
        path /static/*
    }


    # puzzle pages and assets need to be inspected for access
    @needs_check {
        not path * # don't block anything in dev
    }

    # things to be sent to Django that don't need to be gated by @needs_check
    @django_admin {
        path /admin
        path /admin/*
        path /impersonate/*
        path /internal
        path /internal/*
        path /huntinfo/*
    }
    @django_static {
        # django-admin's CSS files load additional CSS, so the referer will be a /static path
        path /static/*
    }

    # `route` prevents Caddy from reordering the directives under it
    route {
        handle @static_root {
            root app/server/puzzles/static_root
            file_server
        }

        reverse_proxy @django_admin     localhost:8000
        reverse_proxy @django_static    localhost:8000

        route @needs_check {
            rewrite * /check{path}
            reverse_proxy localhost:8000 {
                @accel header X-Accel-Redirect *
                handle_response @accel {
                    rewrite * {http.reverse_proxy.header.X-Accel-Redirect}
                    import serve
                }
            }
        }

        import serve
    }
}
