# Generated by Django 4.0.7 on 2023-02-19 21:38

import datetime

import django.db.models.deletion
import puzzles.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("spoilr_core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomPuzzleSubmission",
            fields=[
                (
                    "minipuzzle_submission",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="spoilr_core.minipuzzlesubmission",
                    ),
                ),
                ("count", models.PositiveIntegerField(default=1)),
            ],
            bases=("spoilr_core.minipuzzlesubmission",),
        ),
        migrations.CreateModel(
            name="Puzzle",
            fields=[
                (
                    "spoilr_puzzle",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="spoilr_core.puzzle",
                    ),
                ),
                ("deep", models.IntegerField(verbose_name="DEEP threshold")),
                (
                    "deep_key",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="DEEP key"
                    ),
                ),
                (
                    "override_hint_unlocked",
                    models.BooleanField(
                        default=False,
                        help_text="If true, overrides this puzzle to release hints regardless of solve count",
                    ),
                ),
                (
                    "override_virtual_unlocked",
                    models.BooleanField(
                        default=False,
                        help_text="If true, overrides this puzzle to release the virtual version regardless of time since unlock",
                    ),
                ),
                (
                    "unsolved_icon",
                    models.ImageField(
                        blank=True,
                        max_length=300,
                        upload_to=puzzles.models.Puzzle.create_icon_filename,
                    ),
                ),
                (
                    "solved_icon",
                    models.ImageField(
                        blank=True,
                        max_length=300,
                        upload_to=puzzles.models.Puzzle.create_icon_filename,
                    ),
                ),
                ("icon_x", models.FloatField(default=0)),
                ("icon_y", models.FloatField(default=0)),
                ("icon_size", models.FloatField(default=0)),
                ("icon_ratio", models.FloatField(default=1)),
                ("text_x", models.FloatField(default=0)),
                ("text_y", models.FloatField(default=0)),
                ("emoji", models.CharField(default=":question:", max_length=500)),
                (
                    "testsolve_url",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("points", models.PositiveSmallIntegerField(default=1)),
                (
                    "canonical_puzzle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="puzzles.puzzle",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("spoilr_core.puzzle", models.Model),
        ),
        migrations.CreateModel(
            name="PuzzleSubmission",
            fields=[
                (
                    "spoilr_submission",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="spoilr_core.puzzlesubmission",
                    ),
                ),
                ("used_free_answer", models.BooleanField()),
            ],
            bases=("spoilr_core.puzzlesubmission",),
        ),
        migrations.CreateModel(
            name="StoryCard",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255)),
                ("text", models.TextField(blank=True)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("order", models.IntegerField(default=0, unique=True)),
                ("act", models.IntegerField(default=1)),
                ("url_path", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "puzzle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="story_cards",
                        to="puzzles.puzzle",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "spoilr_team",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="spoilr_core.team",
                    ),
                ),
                ("start_offset", models.DurationField(default=datetime.timedelta)),
                ("total_hints_awarded", models.IntegerField(default=0)),
                ("total_free_answers_awarded", models.IntegerField(default=0)),
                ("total_a3_free_answers_awarded", models.IntegerField(default=0)),
                ("last_solve_time", models.DateTimeField(blank=True, null=True)),
                ("is_prerelease_testsolver", models.BooleanField(default=False)),
                ("is_hidden", models.BooleanField(default=False)),
            ],
            bases=("spoilr_core.team",),
        ),
        migrations.CreateModel(
            name="Minipuzzle",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("spoilr_core.minipuzzle",),
        ),
        migrations.CreateModel(
            name="PuzzleAccess",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("spoilr_core.puzzleaccess",),
        ),
        migrations.CreateModel(
            name="Round",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("spoilr_core.round",),
        ),
        migrations.CreateModel(
            name="StoryState",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.IntegerField(default=0)),
                (
                    "team",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="spoilr_core.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start_time", models.DateTimeField(auto_now_add=True)),
                (
                    "finish_time",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                ("is_complete", models.BooleanField(default=False)),
                ("state", models.JSONField()),
                (
                    "puzzle",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="puzzles.puzzle",
                    ),
                ),
                (
                    "storycard",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="puzzles.storycard",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PuzzleState",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.JSONField()),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.puzzle"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PuzzleAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action", models.CharField(max_length=255)),
                ("subpuzzle", models.CharField(blank=True, max_length=255, null=True)),
                ("action_text", models.TextField(blank=True, null=True)),
                ("datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.puzzle"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comments", models.TextField(blank=True)),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.puzzle"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExtraUnlock",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("deep_key", models.CharField(max_length=500, verbose_name="DEEP key")),
                ("count", models.PositiveIntegerField(default=1)),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExtraGuessGrant",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("NR", "No response"), ("GR", "Granted")],
                        default="NR",
                        max_length=3,
                    ),
                ),
                ("extra_guesses", models.IntegerField(default=20)),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.puzzle"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DeepFloor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enabled", models.BooleanField(default=False)),
                (
                    "uuid",
                    models.CharField(default=puzzles.models.random_uuid, max_length=64),
                ),
                ("deep_key", models.CharField(max_length=500, verbose_name="DEEP key")),
                ("min_deep", models.IntegerField(verbose_name="min DEEP")),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "team",
                    models.ForeignKey(
                        blank=True,
                        help_text="The team to create a time unlock for, leaving it blank will apply it to all teams.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="puzzles.team",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserState",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.CharField(max_length=38)),
                ("state", models.JSONField()),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.puzzle"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
            options={
                "unique_together": {("team", "uuid", "puzzle")},
            },
        ),
        migrations.CreateModel(
            name="Survey",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fun", puzzles.models.RatingField(adjective="fun", max_rating=6)),
                (
                    "difficulty",
                    puzzles.models.RatingField(adjective="hard", max_rating=6),
                ),
                (
                    "comments",
                    models.TextField(blank=True, verbose_name="Anything else:"),
                ),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.puzzle"
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="puzzles.team"
                    ),
                ),
            ],
            options={
                "unique_together": {("team", "puzzle")},
            },
        ),
        migrations.CreateModel(
            name="StoryCardAccess",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "story_card",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="puzzles.storycard",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="spoilr_core.team",
                    ),
                ),
            ],
            options={
                "unique_together": {("team", "story_card")},
            },
        ),
        migrations.AddConstraint(
            model_name="session",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("puzzle__isnull", True), ("storycard__isnull", False)),
                    models.Q(("puzzle__isnull", False), ("storycard__isnull", True)),
                    _connector="OR",
                ),
                name="puzzles_session_puzzle_or_storycard_required",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="puzzlestate",
            unique_together={("team", "puzzle")},
        ),
        migrations.AlterUniqueTogether(
            name="extraunlock",
            unique_together={("team", "deep_key")},
        ),
        migrations.AlterUniqueTogether(
            name="extraguessgrant",
            unique_together={("team", "puzzle")},
        ),
    ]
