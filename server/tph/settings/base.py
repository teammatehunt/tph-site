"""
Django settings for tph project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import enum
import os
from pathlib import Path

from tph.constants import IS_PYODIDE

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SRV_DIR = os.environ.get("SRV_DIR", "/srv")
SERVER_ENVIRONMENT = os.environ.get("SERVER_ENVIRONMENT", "dev")

# Ensure logs directory exists.
LOG_BASE_DIR = Path(SRV_DIR) / "logs"
os.makedirs(LOG_BASE_DIR, exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# FIXME: replace secret key or ensure environment variable is set
SECRET_KEY = os.environ.get("SECRET_KEY", "makeSUREtoREPLACEthis")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
DOMAIN = os.environ.get("SERVER_HOSTNAME")
ALLOWED_HOSTS = []

POSTGRES_HOST = os.environ.get("POSTGRES_HOST", "localhost")
POSTGRES_DB = os.environ.get("POSTGRES_DB", "postgres")
POSTGRES_USER = os.environ.get("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.environ.get("POSTGRES_PASSWORD", "postgres")

REDIS_HOST = os.environ.get("REDIS_HOST", "localhost")
REDIS_PORT = 6379


# class has to be all caps to be accessible via django.conf.settings
@enum.unique
class REDIS_DATABASE_ENUM(enum.IntEnum):
    CHANNELS = 0
    CELERY = 1
    REDIS_CLIENT = 2


# Application definition

INSTALLED_APPS = list(
    filter(
        None,
        [
            not IS_PYODIDE and "whitenoise.runserver_nostatic",
            not IS_PYODIDE and "channels",
            "django.contrib.admin",
            "django.contrib.auth",
            "django.contrib.contenttypes",
            "django.contrib.humanize",
            "django.contrib.messages",
            "django.contrib.sessions",
            "django.contrib.staticfiles",
            "django_extensions",
            not IS_PYODIDE and "impersonate",
            "puzzles",
            "pwreset",
        ],
    )
)
# silk should be disabled except when profiling in dev
SILK_ENABLED = False

MIDDLEWARE = list(
    filter(
        None,
        [
            "django.middleware.security.SecurityMiddleware",
            not IS_PYODIDE and "whitenoise.middleware.WhiteNoiseMiddleware",
            "django.contrib.sessions.middleware.SessionMiddleware",
            "django.middleware.common.CommonMiddleware",
            #    "django.middleware.csrf.CsrfViewMiddleware",
            "django.contrib.auth.middleware.AuthenticationMiddleware",
            IS_PYODIDE and "tph.utils.DefaultUserMiddleware",
            "django.contrib.messages.middleware.MessageMiddleware",
            "django.middleware.clickjacking.XFrameOptionsMiddleware",
            not IS_PYODIDE and "impersonate.middleware.ImpersonateMiddleware",
            "puzzles.messaging.log_request_middleware",
            "puzzles.context.context_middleware",
        ],
    )
)

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}
SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_CACHE_ALIAS = "default"

ROOT_URLCONF = "tph.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "puzzles.context.context_processor",
            ],
        },
    },
]

ASGI_APPLICATION = "tph.asgi.application"


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_HOST,
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"
USE_I18N = False
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "static"

# Store compressed static files with whitenoise.
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
WHITENOISE_KEEP_ONLY_HASHED_FILES = True


# Media files uploaded by user that we save.
# Database only stores filenames, files are saved here.

MEDIA_ROOT = os.path.join(SRV_DIR, "media/")
MEDIA_URL = "/media/"


# Email SMTP information

# FIXME: update email hosts
EMAIL_USE_TLS = True
EMAIL_HOST = "mail.mypuzzlehunt.com"
# EMAIL_USER_DOMAIN is set in prod.py, staging.py, dev.py
EMAIL_USER_LOCALNAME = "mate"
EMAIL_PASSWORD = os.environ.get("SMTP_PASSWORD", "")
EMAIL_BOUNCES_LOCALNAME = "bounces"
EMAIL_RESUBSCRIBE_LOCALNAME = "resubscribe"
EMAIL_UNSUBSCRIBE_LOCALNAME = "unsubscribe"
# whether to put bounce email on the envelope (Return-Path header)
EMAIL_SENDFROM_BOUNCES_ADDRESS = True
EMAIL_PORT = 587
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_SUBJECT_PREFIX = "[FIXME Hunt] "
# add other addresses that we should consider to be from us
EXTERNAL_EMAIL_ADDRESSES = set(
    [
        "mypuzzlehunt@gmail.com",
    ]
)


# admin emails for error logging
SERVER_EMAIL = "admin@mypuzzlehunt.com"
ADMINS = []

# email addresses to whitelist in testing
DEV_EMAIL_WHITELIST = set()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "django": {"format": "%(asctime)s [%(levelname)s] %(module)s\n%(message)s"},
        "puzzles": {"format": "%(asctime)s [%(levelname)s] %(message)s"},
    },
    "handlers": {
        "django": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOG_BASE_DIR / "django.log",
            "formatter": "django",
        },
        "django-info": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": LOG_BASE_DIR / "django.info.log",
            "formatter": "django",
        },
        "django-errors": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": LOG_BASE_DIR / "django.error.log",
            "formatter": "django",
        },
        "puzzle": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOG_BASE_DIR / "puzzle.log",
            "formatter": "puzzles",
        },
        "puzzle-errors": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": LOG_BASE_DIR / "puzzle.error.log",
            "formatter": "puzzles",
        },
        "request": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": LOG_BASE_DIR / "request.log",
            "formatter": "puzzles",
        },
        "request-errors": {
            "level": "ERROR",
            "class": "logging.FileHandler",
            "filename": LOG_BASE_DIR / "request.error.log",
            "formatter": "puzzles",
        },
        # "mail_admins": {
        # "level": "ERROR",
        # "class": "django.utils.log.AdminEmailHandler",
        # },
    },
    "loggers": {
        "django": {
            "handlers": [
                "django",
                "django-info",
                # "mail_admins",
                "django-errors",
            ],
            "level": "DEBUG",
            "propagate": True,
        },
        "puzzles.puzzle": {
            "handlers": ["puzzle", "puzzle-errors"],
            "level": "DEBUG",
            "propagate": False,
        },
        "puzzles.request": {
            "handlers": ["request", "request-errors"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Websocket/channels config
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                {
                    "address": (REDIS_HOST, REDIS_PORT),
                    "db": REDIS_DATABASE_ENUM.CHANNELS.value,
                }
            ],
            "capacity": 1500,  # 1500 messages in queue
            "expiry": 10,  # messages expire in 10s
        },
    }
}

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Discord alerts
SEND_DISCORD_ALERTS = False

# Required to use pgbouncer. Disables some of Django's functionality, so make
# sure it's on for dev too to avoid commiting changes that wouldn't work on staging.
DISABLE_SERVER_SIDE_CURSORS = True

# Celery
CELERY_BROKER_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DATABASE_ENUM.CELERY}"
CELERY_RESULT_BACKEND = (
    f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DATABASE_ENUM.CELERY}"
)
CELERY_BROKER_TRANSPORT_OPTIONS = {
    "visibility_timeout": 5 * 60,  # 5 minutes
}
CELERY_TASK_TIME_LIMIT = 10 * 60  # 10 minutes
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_BEAT_SCHEDULE = {
    # add cron jobs here
}
