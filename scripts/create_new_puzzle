#!/usr/bin/env bash
set -e
REAL_SOURCE="$(perl -e "use Cwd 'abs_path'; print abs_path('${BASH_SOURCE}')")"
cd "$(dirname "$(dirname "${REAL_SOURCE}")")"

docker-compose() {
  command docker-compose -f docker-compose.yml -f deploy/docker-compose.dev.yml "$@"
}

echo "Enter puzzle title (case sensitive):"
read title

echo "Enter puzzle round (defaults to 'intro'):"
read round
if [ -z "$round" ]; then
  round="intro"
fi

echo "Is this a meta? [y/N]:"
read is_meta
if [[ $is_meta == "y" ]]; then
  meta_arg=" --is-meta"
else
  meta_arg=""
fi

echo "Enter puzzle answer (defaults to 'REDACTED'):"
read answer
if [ -z "$round" ]; then
  answer="REDACTED"
fi

# Create puzzle in Django and get the slug (trimming whitespace)
slug=$(docker-compose exec tph /app/server/manage.py create_new_puzzle "$title" --round "$round" --answer "$answer""$meta_arg" | tr -d $"\r")

echo "Successfully created puzzle $title ($slug) [$round] in Django."
echo -e "If you need to make further edits, please see the Django admin page.\n"

# Create puzzle files by substituting in the slug
INSERT_SLUG=$slug
INSERT_TITLE=$title
INSERT_ANSWER=$answer
sed_string="s/\[\[INSERT SLUG\]\]/${INSERT_SLUG}/g; s/\[\[INSERT TITLE\]\]/${INSERT_TITLE}/g; s/\[\[INSERT ANSWER\]\]/${INSERT_ANSWER}/g;"
mkdir -p client/pages/puzzles/
sed "${sed_string}" < client/templates/puzzle.template.tsx > client/pages/puzzles/$slug.tsx
echo "Successfully created frontend page: client/pages/puzzles/$slug.tsx"
mkdir -p client/pages/solutions/
sed "${sed_string}" < client/templates/solution.template.tsx > client/pages/solutions/$slug.tsx
echo -e "Successfully created frontend page: client/pages/solutions/$slug.tsx\n"

echo "When everything looks good, make sure to run ./scripts/save_fixtures to update the fixtures."
